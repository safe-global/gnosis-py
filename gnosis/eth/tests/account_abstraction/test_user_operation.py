from unittest import TestCase

from hexbytes import HexBytes

from ...account_abstraction import UserOperation
from ...account_abstraction.user_operation import UserOperationV07
from ..mocks.mock_bundler import (
    safe_4337_chain_id_mock,
    safe_4337_user_operation_hash_mock,
    user_operation_mock,
)


class TestUserOperation(TestCase):
    def test_calculate_user_operation_hash_V06(self):
        user_operation_hash = safe_4337_user_operation_hash_mock.hex()
        user_operation = UserOperation.from_bundler_response(
            user_operation_hash, user_operation_mock["result"]
        )
        self.assertEqual(
            user_operation.calculate_user_operation_hash(safe_4337_chain_id_mock),
            safe_4337_user_operation_hash_mock,
        )

    def test_calculate_user_operation_hash_V07(self):
        user_operation_hash = (
            "0xc8e745161cb3523539bae0e5ed7fa7812dd812bf39030bb73378e792c1ee6576"
        )
        user_operation = UserOperationV07(
            "0xc8e745161cb3523539bae0e5ed7fa7812dd812bf39030bb73378e792c1ee6576",
            "0x1da329ef902379ff73554502d39926e464908425",
            0,
            "0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec67",
            HexBytes(
                "0x1688f0b9000000000000000000000000f9e93efbf37b588f9c79d509c48b87a26c3dfeb90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000844fff40e1277cc7ff46804f631ff0ed4cca5603a534066323b522073e113ee4d86d34298100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            ),
            HexBytes(
                "0x1af876fe00000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c762000000000000000000000000c40156abfee908e2e3269da84fa9609bccddec60fc22c8ee4f29eb3d046f14f2d9b50ced813a1522cc702c418a4e1134b81ac3a002dfc8bae91519edc3944211c524092a1b599acf0d1f5e08e820d618e2f09c6e000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b0000000000000000000000002dd68b007b46fbe91b9a7c3eda5a7a1063cb5b47000000000000000000000000000000000000000000000000000000000000012000000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c22600000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000648d0dc49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000075cf11467937ce3f2f357ce24ffc3dbf8fd5c226000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104541d63c8000000000000000000000000bb9ebb7b8ee75cdbf64e5ce124731a89c2bc4a070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a14481940000000000000000000000001da329ef902379ff73554502d39926e46490842568e9ec8f675d7d3e64886c7a33a4763060a61422da8e6efa875b0901be5176e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            ),
            0xC34CF,
            0xE2395,
            0x1241E,
            0x47868C00,
            0x5DBEFE60,
            HexBytes(
                "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e04d29724cd758a76bde450eb4e2be71bf21398d55795de887cab857b85cd49a447d013104f681b1a225de0d97e4e3dfc8587861f847f539a05425591d3167c9f2000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d976305000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a35313733222c2263726f73734f726967696e223a66616c7365000000000000000000000000"
            ),
            "0x0000000071727De22E5E9d8BAf0edAc6f37da032",
        )
        self.assertEqual(
            user_operation.calculate_user_operation_hash(safe_4337_chain_id_mock).hex(),
            user_operation_hash,
        )
